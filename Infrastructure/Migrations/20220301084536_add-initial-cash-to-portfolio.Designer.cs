// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220301084536_add-initial-cash-to-portfolio")]
    partial class addinitialcashtoportfolio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CustomInterestAssetInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomInterestAssetInfos");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.PersonalAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InputCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("InputDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("InputMoneyAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PersonalAsset");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PersonalAsset");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("InitialCash")
                        .HasColumnType("double precision");

                    b.Property<string>("InitialCurrency")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.BankSavingAsset", b =>
                {
                    b.HasBaseType("ApplicationCore.Entity.Asset.PersonalAsset");

                    b.Property<string>("Description")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text");

                    b.Property<double>("InterestRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.Property<bool>("IsGoingToReinState")
                        .HasColumnType("boolean");

                    b.Property<int>("TermRange")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("BankSavingAsset");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CashAsset", b =>
                {
                    b.HasBaseType("ApplicationCore.Entity.Asset.PersonalAsset");

                    b.Property<double>("CurrentAmount")
                        .HasColumnType("double precision");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_PersonalAsset_UserId1");

                    b.HasDiscriminator().HasValue("CashAsset");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CustomInterestAsset", b =>
                {
                    b.HasBaseType("ApplicationCore.Entity.Asset.PersonalAsset");

                    b.Property<int>("CustomInterestAssetInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text");

                    b.Property<double>("InterestRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.Property<int>("TermRange")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.HasIndex("CustomInterestAssetInfoId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("CustomInterestAsset");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.RealEstateAsset", b =>
                {
                    b.HasBaseType("ApplicationCore.Entity.Asset.PersonalAsset");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("RealEstateAsset_Description");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("RealEstateAsset");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CustomInterestAssetInfo", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.PersonalAsset", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Portfolio", "Portfolio")
                        .WithMany("PersonalAssets")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Portfolio", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.BankSavingAsset", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CashAsset", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithOne("CashAsset")
                        .HasForeignKey("ApplicationCore.Entity.Asset.CashAsset", "UserId")
                        .HasConstraintName("FK_PersonalAsset_Users_UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.CustomInterestAsset", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Asset.CustomInterestAssetInfo", "CustomInterestAssetInfo")
                        .WithMany()
                        .HasForeignKey("CustomInterestAssetInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomInterestAssetInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Asset.RealEstateAsset", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("RealEstateAssets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Portfolio", b =>
                {
                    b.Navigation("PersonalAssets");
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Navigation("CashAsset");

                    b.Navigation("RealEstateAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
